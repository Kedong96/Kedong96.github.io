<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>okhttp</title>
      <link href="/2021/09/23/http-okhttp/"/>
      <url>/2021/09/23/http-okhttp/</url>
      
        <content type="html"><![CDATA[<h1 id="OkHttp使用详解—基于HTTP协议"><a href="#OkHttp使用详解—基于HTTP协议" class="headerlink" title="OkHttp使用详解—基于HTTP协议"></a>OkHttp使用详解—基于HTTP协议</h1><p>打开浏览器 -&gt; 输入网址 -&gt; 按下回车，经过一顿行云流水的操作，我们想要访问的网站内容便展现在显示器上。这几个操作看似简单，实际背后蕴含着复杂的机制，包括输入的域名 (例如<a href="http://www.baidu.com/">www.baidu.com</a>) 如何定位到对应的服务器，服务器如何接收浏览器的请求并返回正确的内容，浏览器如何呈现返回的数据……</p><p>本文主要是先对其中的HTTP协议进行分析，后续讲述在Java编程中如何利用Square公司开发的<code>OkHttp</code>框架来构建HTTP请求来调取第三方接口。</p><h2 id="一-HTTP协议"><a href="#一-HTTP协议" class="headerlink" title="一 HTTP协议"></a>一 HTTP协议</h2><h3 id="1-HTTP简介"><a href="#1-HTTP简介" class="headerlink" title="1. HTTP简介"></a>1. HTTP简介</h3><p>超文本传输协议 (<strong>H</strong>yper<strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol，缩写：HTTP) 是一种用于分布式、协作式和超媒体信息系统的<strong>应用层</strong>协议。HTTP是万维网的数据通信的基础。</p><p>HTTP的发展是由蒂姆·伯纳斯-李于1989年在欧洲核子研究组织(CERN) 所发起。HTTP的标准制定由万维网协会 (World Wide Web Consortium，W3C)和互联网工程任务组 (Internet Engineering Task Force，IETF) 进行协调，最终发布了一系列的RFC，其中最著名的是1999年6月公布的 RFC 2616，定义了HTTP协议中现今广泛使用的一个版本——HTTP 1.1。</p><p>2014年12月，互联网工程任务组 (IETF) 的Hypertext Transfer Protocol Bis (httpbis) 工作小组将HTTP/2标准提议递交至IESG进行讨论，于2015年2月17日被批准。 HTTP/2标准于2015年5月以RFC 7540正式发表，取代HTTP 1.1成为HTTP的实现标准。</p><p>在谷歌浏览器中，我们进入开发者模式可以看到资源使用的协议，如下图，部分是HTTP/1.1，部分则是HTTP/2.0。</p><img src="http.png" alt="图1. 开发者模式查看HTTP协议" style="zoom:80%;"><p>HTTP是一个客户端终端 (用户) 和服务器端 (网站) 请求和应答的标准 (TCP)。通过使用网页浏览器、网络爬虫或者其它的工具，客户端发起一个HTTP请求到服务器上指定端口 (默认端口为80) 。我们称这个客户端为用户代理程序 (user agent) 。应答的服务器上存储着一些资源，比如HTML文件和图像。我们称这个应答服务器为源服务器 (origin server)。在用户代理和源服务器中间可能存在多个“中间层”，比如代理服务器、网关或者隧道 (tunnel)。</p><p>尽管TCP/IP协议是互联网上最流行的应用，HTTP协议中，并没有规定必须使用它或它支持的层。事实上，HTTP可以在任何互联网协议上，或其他网络上实现。HTTP假定其下层协议提供可靠的传输。因此，任何能够提供这种保证的协议都可以被其使用。因此也就是其在TCP/IP协议族使用TCP作为其传输层。</p><p>通常，由HTTP客户端发起一个请求，创建一个到服务器指定端口 (默认是80端口) 的TCP连接。HTTP服务器则在那个端口监听客户端的请求。一旦收到请求，服务器会向客户端返回一个状态，比如”HTTP/1.1 200 OK”，以及返回的内容，如请求的文件、错误消息、或者其它信息。</p><h3 id="2-HTTP工作原理"><a href="#2-HTTP工作原理" class="headerlink" title="2. HTTP工作原理"></a>2. HTTP工作原理</h3><p>HTTP 协议定义 Web 客户端如何从 Web 服务器请求 Web 页面，以及服务器如何把 Web 页面传送给客户端。HTTP 协议采用了<strong>请求/响应模型</strong>。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。</p><p>以下是 HTTP 请求/响应的步骤：</p><ol><li><p><strong>客户端连接到 Web 服务器</strong><br>一个 HTTP 客户端，通常是浏览器，与Web服务器的 HTTP 端口 (默认为80) 建立一个 TCP 套接字连接。例如，<a href="http://www.baidu.com/">http://www.baidu.com</a>；</p></li><li><p><strong>发送 HTTP 请求</strong><br>通过 TCP 套接字，客户端向 Web 服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据4部分组成；</p></li><li><p><strong>服务器接受请求并返回 HTTP 响应</strong><br>Web 服务器解析请求，定位请求资源。服务器将资源复本写到 TCP 套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据4部分组成；</p></li><li><p><strong>释放连接 TCP 连接</strong><br>若 connection 模式为<code>close</code>，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接；若connection 模式为<code>keepalive</code>，则该连接会保持一段时间，在该时间内可以继续接收请求；</p></li><li><p><strong>客户端浏览器解析 HTML 内容</strong><br>客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。</p></li></ol><img src="http1.png" alt="图2. 客户端和服务器通信" style="zoom:80%;"><h3 id="3-HTTP特点"><a href="#3-HTTP特点" class="headerlink" title="3. HTTP特点"></a>3. HTTP特点</h3><p>HTTP 协议一共有五大特点：1. 支持客户/服务器模式；2. 简单快速；3. 灵活；<strong>4. 无连接</strong>；<strong>5. 无状态</strong> 。</p><ul><li><p><strong>无连接</strong></p><p>无连接的含义是<strong>限制每次连接只处理一个请求</strong>。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间，并且可以提高并发性能。</p><p>但是无连接有两种方式，早期的 HTTP 协议是一个请求一个响应之后，直接就断开了，但是现在的 HTTP 协议1.1版本不是直接就断开了，而是等几秒钟，如果用户在这几秒钟之内有新的请求，那么还是通过之前的连接通道来收发消息；如果这几秒钟用户没有发送新的请求，那么就会断开连接，这样可以提高效率，减少短时间内建立连接的次数，因为建立连接也是耗时的。连接默认时间是3s，这个时间可以通过后端代码来调整，网站根据用户的行为来分析统计出一个最优的等待时间。</p></li><li><p><strong>无状态</strong></p><p>HTTP 是一种不保存状态，即无状态 (stateless) 协议。HTTP 协议自身不对请求和响应之间的通信状态进行保存。也就是说在 HTTP 这个级别，协议对于发送过的请求或响应都不做持久化处理。</p></li></ul><p><img src="http2.png" alt="图3. 无状态的HTTP"></p><p>使用 HTTP 协议，每当有新的请求发送时，就会有对应的新响应产生。协议本身并不保留之前一切的请求或响应报文的信息。这是为了更快地处理大量事务，确保协议的可伸缩性，而特意把 HTTP 协议设计成如此简单的。</p><p>可是，随着 Web 的不断发展，因无状态而导致业务处理变得棘手的情况增多了。比如，用户登录到一家购物网站，即使他跳转到该站的其他页面后，也需要能继续保持登录状态。针对这个实例，网站为了能够掌握是谁送出的请求，需要保存用户的状态。 HTTP/1.1 虽然是无状态协议，但为了实现期望的保持状态功能，于 是引入了 Cookie 技术。有了 Cookie 再用 HTTP 协议通信，就可以管理状态了。</p><h3 id="4-HTTP请求方法"><a href="#4-HTTP请求方法" class="headerlink" title="4. HTTP请求方法"></a>4. HTTP请求方法</h3><p>HTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源：</p><ol><li><p><code>GET</code>：获取资源</p><p>GET 方法用来请求访问已被 URI 识别的资源。指定的资源经服务器端解析后返回响应内容。如果请求的资源是文本，那就保持原样返回；如果是像 CGI (Common Gateway Interface，通用网关接口) 那样的程序，则返回经过执行后的输出结果。</p></li><li><p><code>HEAD</code>：获取报文首部</p><p>HEAD 方法和 GET 方法一样，只是不返回报文主体部分。用于确认 URI 的有效性及资源更新的日期时间等。</p></li><li><p><code>POST</code>：传输实体主体</p><p>向指定资源提交数据，请求服务器进行处理 (例如提交表单或者上传文件) 。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。</p></li><li><p><code>GET</code>：获取资源</p><p>GET 方法用来请求访问已被 URI 识别的资源。指定的资源经服务器端解析后返回响应内容。如果请求的资源是文本，那就保持原样返回；如果是像 CGI (Common Gateway Interface，通用网关接口) 那样的程序，则返回经过执行后的输出结果。</p></li><li><p><code>GET</code>：获取资源</p><p>GET 方法用来请求访问已被 URI 识别的资源。指定的资源经服务器端解析后返回响应内容。如果请求的资源是文本，那就保持原样返回；如果是像 CGI (Common Gateway Interface，通用网关接口) 那样的程序，则返回经过执行后的输出结果。</p></li><li><p><code>GET</code>：获取资源</p><p>GET 方法用来请求访问已被 URI 识别的资源。指定的资源经服务器端解析后返回响应内容。如果请求的资源是文本，那就保持原样返回；如果是像 CGI (Common Gateway Interface，通用网关接口) 那样的程序，则返回经过执行后的输出结果。</p></li><li><p><code>GET</code>：获取资源</p><p>GET 方法用来请求访问已被 URI 识别的资源。指定的资源经服务器端解析后返回响应内容。如果请求的资源是文本，那就保持原样返回；如果是像 CGI (Common Gateway Interface，通用网关接口) 那样的程序，则返回经过执行后的输出结果。</p></li><li><p><code>GET</code>：获取资源</p><p>GET 方法用来请求访问已被 URI 识别的资源。指定的资源经服务器端解析后返回响应内容。如果请求的资源是文本，那就保持原样返回；如果是像 CGI (Common Gateway Interface，通用网关接口) 那样的程序，则返回经过执行后的输出结果。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> Java </tag>
            
            <tag> OkHttp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>I/O模型与Netty原理分析</title>
      <link href="/2021/09/22/io-model/"/>
      <url>/2021/09/22/io-model/</url>
      
        <content type="html"><![CDATA[<h1 id="I-O模型与Netty原理分析"><a href="#I-O模型与Netty原理分析" class="headerlink" title="I/O模型与Netty原理分析"></a>I/O模型与Netty原理分析</h1><p>众所周知，<strong>I/O 网络编程</strong>是深入学习Java过程中必须掌握的一个技能点。从简单的控制台（Console）输入与输出、文本文件的数据读写，一直到跨越网络的数据流处理，均是 I/O 操作的一个环节。从 Java 对 <code>InputStream</code>  和 <code>OutputStream</code>  的繁多实现我们也可以感受到其重要性。</p><p>Netty 是一个基于 <code>NIO</code>  的客户、服务器端的编程框架，使用 Netty 可以确保你快速和简单的开发出一个网络应用，例如实现了某种协议的客户、服务端应用。Netty 相当于简化和流线化了网络应用的编程开发过程，例如：基于 TCP 和 UDP 的 socket 服务开发。它活跃和成长于用户社区，像大型公司 Facebook 和 Instagram 以及 流行的开源项目如 Apache Cassandra 和 Elasticsearch 等，都利用其强大的对于网络抽象的核心代码。</p><p>本篇文章旨在对 I/O 和 Netty 的原理进行简要的分析，以期对网络编程可以有更深入的理解。</p><blockquote><p>Netty官网：<a href="https://netty.io/">https://netty.io/</a></p></blockquote><h2 id="一-Java-I-O模型"><a href="#一-Java-I-O模型" class="headerlink" title="一    Java I/O模型"></a>一    Java I/O模型</h2><h3 id="1-BIO-Blocking-IO"><a href="#1-BIO-Blocking-IO" class="headerlink" title="1. BIO (Blocking IO)"></a>1. BIO (Blocking IO)</h3><p>BIO 是<strong>同步阻塞</strong>模型，一个客户端连接对应一个处理线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理。在 BIO 中，accept 和 read 方法都是阻塞操作，如果没有连接请求，accept 方法阻塞；如果无数据可读取，read 方法阻塞。</p><img src="/2021/09/22/io-model/bio.jpg" alt="图1. BIO模型" style="zoom: 75%;"><h3 id="2-NIO-Non-Blocking-IO"><a href="#2-NIO-Non-Blocking-IO" class="headerlink" title="2. NIO (Non Blocking IO)"></a>2. NIO (Non Blocking IO)</h3><p>NIO 是<strong>同步非阻塞</strong>模型，服务端的一个线程可以处理多个请求，客户端发送的连接请求注册在多路复用器 <code>Selector</code>  上，服务端线程通过轮询多路复用器查看是否有 IO 请求，有则进行处理。</p><img src="/2021/09/22/io-model/nio.jpg" alt="图2. NIO模型简图" style="zoom: 80%;"><p>NIO 的三大核心组件：</p><ul><li><p><strong>Buffer</strong>：用于存储数据，底层基于数组实现，针对8种基本类型提供了对应的缓冲区类。</p></li><li><p><strong>Channel</strong>：用于进行数据传输，面向缓冲区进行操作，支持双向传输，数据可以从 Channel 读取到 Buffer 中，也可以从 Buffer 写到 Channel 中。</p></li><li><p><strong>Selector</strong>：选择器，当向一个 Selector 中注册 Channel 后，Selector 内部的机制就可以自动不断地查询（Select）这些注册的 Channel 是否有已就绪的 I/O 事件（例如可读、可写、网络连接完成等），这样程序就可以很简单地使用一个线程高效地管理多个 Channel，也可以说管理多个网络连接，因此，Selector 也被称为多路复用器。当某个 Channel 上面发生了读或者写事件，这个 Channel 就处于就绪状态，会被 Selector 监听到，然后通过 SelectionKeys 可以获取就绪 Channel 的集合，进行后续的 I/O 操作。</p><img src="/2021/09/22/io-model/nio1.png" alt="图3. NIO模型详细分析" style="zoom: 100%;"></li></ul><blockquote><p>Epoll 是 Linux 下多路复用IO接口 select/poll 的增强版本，它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统 CPU 利用率，获取事件的时候，它无须遍历整个被侦听的描述符集，只要遍历那些被内核 IO 事件异步唤醒而加入 Ready 队列的描述符集合就行了。</p></blockquote><h3 id="3-AIO-NIO-2-0"><a href="#3-AIO-NIO-2-0" class="headerlink" title="3.  AIO (NIO 2.0)"></a>3.  AIO (NIO 2.0)</h3><p>AIO 是<strong>异步非阻塞</strong>模型，一般用于连接数较多且连接时间较长的应用，在读写事件完成后由回调服务去通知程序启动线程进行处理。与NIO不同，当进行读写操作时，只需直接调用 read 或 write 方法即可。这两种方法均为异步的，对于读操作而言，当有流可读取时，操作系统会将可读的流传入 read 方法的缓冲区，并通知应用程序；对于写操作而言，当操作系统将 write 方法传递的流写入完毕时，操作系统主动通知应用程序。可以理解为，read/write 方法都是异步的，完成后会主动调用回调函数。</p><h2 id="二-I-O模型具体分析"><a href="#二-I-O模型具体分析" class="headerlink" title="二 I/O模型具体分析"></a>二 I/O模型具体分析</h2><h3 id="1-BIO-NIO-AIO使用场景分析"><a href="#1-BIO-NIO-AIO使用场景分析" class="headerlink" title="1.  BIO/NIO/AIO使用场景分析"></a>1.  BIO/NIO/AIO使用场景分析</h3><ul><li><p>BIO 方式适用于连接数比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 之前唯一的选择，程序较为简单容易理解。</p></li><li><p>NIO 方式适用于连接数目多且连接比较短的架构，比如聊天服务器，弹幕系统，服务器间通讯等，编程比较复杂，JDK1.4 开始支持。</p></li><li><p>AIO 方式适用于连接数目多且连接比较长的架构，比如相册服务器，充分调用 OS 参与并发操作，变成比较复杂，JDK7 开始支持。</p></li></ul><h3 id="2-BIO模型"><a href="#2-BIO模型" class="headerlink" title="2. BIO模型"></a>2. BIO模型</h3><h4 id="1-BIO基本介绍"><a href="#1-BIO基本介绍" class="headerlink" title="(1) BIO基本介绍"></a>(1) BIO基本介绍</h4><ul><li>Java BIO 就是传统的 Java IO 编程，其相关的类和接口在 java.io 包下。</li><li>BIO (Blocking I/O)：同步阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时，服务器就会需要启动一个线程来进行处理。如果这个连接不作任何事情就会造成不必要的开销，可以通过线程池机制改善。</li></ul><h4 id="2-BIO编程简要流程"><a href="#2-BIO编程简要流程" class="headerlink" title="(2) BIO编程简要流程"></a>(2) BIO编程简要流程</h4><ol><li>服务器驱动一个 ServerSocket；</li><li>客户端启动 Socket 对服务器进行通信，默认情况下服务器端需要对每一个客户端建立一个线程进行通信；</li><li>客户端发出请求后，先咨询服务器是否有线程响应，如果没有则会等待，或者被拒绝；</li><li>如果有响应，客户端线程会等待请求结束后，再继续执行。</li></ol><h4 id="3-BIO服务端代码示例"><a href="#3-BIO服务端代码示例" class="headerlink" title="(3) BIO服务端代码示例"></a>(3) BIO服务端代码示例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BIOServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 线程池机制</span>        <span class="token comment">// 思路</span>        <span class="token comment">// 1. 创建一个线程池</span>        <span class="token comment">// 2. 如果有客户端连接，就创建一个线程，与之通讯</span>                <span class="token class-name">ExecutorService</span> newCachedThreadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建serverSocket</span>        <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器启动了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 监听，等待客户端连接</span>            <span class="token keyword">final</span> <span class="token class-name">Socket</span> socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接到一个客户端"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            newCachedThreadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token function">handler</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> read <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> read<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭和client的连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-BIO问题分析"><a href="#4-BIO问题分析" class="headerlink" title="(4) BIO问题分析"></a>(4) BIO问题分析</h4><ol><li>每个请求都需要创建独立的线程，与对应的客户端进行数据处理；</li><li>当并发数大时，需要创建大量线程来处理连接，系统资源占用较大；</li><li>连接建立后，如果当前线程暂时没有数据可读，则当前线程会一直阻塞在 Read 操作上，造成线程资源浪费；</li></ol><h3 id="3-NIO模型"><a href="#3-NIO模型" class="headerlink" title="3. NIO模型"></a>3. NIO模型</h3><h4 id="1-NIO基本介绍"><a href="#1-NIO基本介绍" class="headerlink" title="(1) NIO基本介绍"></a>(1) NIO基本介绍</h4><ol><li>Java NIO 全称 Java non-blocking IO，指的是 JDK 提供的新 API。从 JDK 1.4 开始，Java 提供了一系列改进的输入/输出的新特性，被统称为 NIO，即 New IO，是同步非阻塞的。</li><li>NIO 相关类都放在 java.nio 包下，并对原 java.io 包中很多类进行了改写。</li><li>NIO 有<strong>三大核心</strong>部分：<strong>Channel (通道)</strong> 、<strong>Buffer (缓冲区)</strong> 、<strong>Selector (选择器)</strong> 。</li><li>NIO 是面向缓冲区编程的。数据读取到了一个它稍微处理的缓冲区，需要时可在缓冲区中前后移动，这就增加了处理过程中的灵活性，使用它可以提供非阻塞的高伸缩性网络。</li><li>Java NIO 的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用数据，如果目前没有可用数据时，则说明都不会获取，而不是保持线程阻塞，所以直到数据变为可以读取之前，该线程可以做其他事情。非阻塞写入同理。</li></ol><h4 id="2-NIO三大核心组件关系"><a href="#2-NIO三大核心组件关系" class="headerlink" title="(2) NIO三大核心组件关系"></a>(2) NIO三大核心组件关系</h4><img src="/2021/09/22/io-model/1631856059379-ff9337d7-8dc2-4c0d-b046-9cee0fc0bc4b.png" alt="图4. 三大核心组件关系" style="zoom:80%;"><p><strong>说明：</strong></p><ol><li>每个 Channel 对应一个 Buffer；</li><li>Selector 对应一个线程，一个线程对应多个 Channel；</li><li>该图反应了有三个 Channel 注册到该 Selector；</li><li>程序切换到那个 Channel 是由事件(Event)决定的；</li><li>Selector 会根据不同的事件，在各个通道上切换；</li><li>Buffer 就是一个内存块，底层是有一个数组；</li><li>数据的读取和写入是通过 Buffer，但是需要<code>flip()</code> 切换读写模式。而 BIO 是单向的，要么输入流要么输出流。</li></ol><h4 id="3-Buffer使用机制"><a href="#3-Buffer使用机制" class="headerlink" title="(3) Buffer使用机制"></a>(3) Buffer使用机制</h4><ul><li><strong>Buffer简介</strong></li></ul><p>缓冲区本质上是一个可以读写数据的内存块，可以理解为是一个容器对象(含数组)，该对象提供了一组方法，可以更轻松地使用内存块，缓冲区对象内置了一些机制，能够跟踪和记录缓冲区的状态变化情况。</p><p>Channel 提供从文件、网络读取数据的渠道，但是读取或者都必须经过 Buffer。</p><p>在 Buffer 子类中维护着一个对应类型的数组，用来存放数据：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">IntBuffer</span>    <span class="token keyword">extends</span> <span class="token class-name">Buffer</span>    <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IntBuffer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token comment">// These fields are declared here rather than in Heap-X-Buffer in order to</span>    <span class="token comment">// reduce the number of virtual method invocations needed to access these</span>    <span class="token comment">// values, which is especially costly when coding small buffers.</span>    <span class="token comment">//</span>    <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hb<span class="token punctuation">;</span>                  <span class="token comment">// Non-null only for heap buffers</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> offset<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isReadOnly<span class="token punctuation">;</span>                 <span class="token comment">// Valid only for heap buffers</span>    <span class="token comment">// Creates a new buffer with the given mark, position, limit, capacity,</span>    <span class="token comment">// backing array, and array offset</span>    <span class="token comment">//</span>    <span class="token class-name">IntBuffer</span><span class="token punctuation">(</span><span class="token keyword">int</span> mark<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> lim<span class="token punctuation">,</span> <span class="token keyword">int</span> cap<span class="token punctuation">,</span>   <span class="token comment">// package-private</span>                 <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hb<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mark<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> lim<span class="token punctuation">,</span> cap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hb <span class="token operator">=</span> hb<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>offset <span class="token operator">=</span> offset<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// Creates a new buffer with the given mark, position, limit, and capacity</span>    <span class="token comment">//</span>    <span class="token class-name">IntBuffer</span><span class="token punctuation">(</span><span class="token keyword">int</span> mark<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> lim<span class="token punctuation">,</span> <span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// package-private</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>mark<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> lim<span class="token punctuation">,</span> cap<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Buffer 中定义了四个属性来提供所其包含的数据元素：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Invariants: mark &lt;= position &lt;= limit &lt;= capacity</span><span class="token keyword">private</span> <span class="token keyword">int</span> mark <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> limit<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="center"><strong>属性</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">capacity</td><td align="center">容量，即可以容纳的最大数据量；在缓冲区被创建时候就被指定，无法修改</td></tr><tr><td align="center">limit</td><td align="center">表示缓冲区的当前终点，不能对缓冲区超过极限的位置进行读写操作，但极限是可以修改的</td></tr><tr><td align="center">position</td><td align="center">当前位置，下一个要被读或者写的索引，每次读写缓冲区数据都会改变该值，为下次读写做准备</td></tr><tr><td align="center">Mark</td><td align="center">标记当前 position 位置，当 reset 后回到标记位置</td></tr></tbody></table><ul><li><strong>Buffer使用示例</strong>：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BasicBuffer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">IntBuffer</span> intBuffer <span class="token operator">=</span> <span class="token class-name">IntBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>intBuffer<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            intBuffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        intBuffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>intBuffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>intBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>Buffer常用子类</strong>：</li></ul><table><thead><tr><th align="center"><strong>Buffer 常用子类</strong></th><th align="center"><strong>描述</strong></th><th align="center"><strong>Buffer 常用子类</strong></th></tr></thead><tbody><tr><td align="center">ByteBuffer</td><td align="center">存储字节数据到缓冲区</td><td align="center">ByteBuffer</td></tr><tr><td align="center">ShortBuffer</td><td align="center">存储字符串数据到缓冲区</td><td align="center">ShortBuffer</td></tr><tr><td align="center">CharBuffer</td><td align="center">存储字符数据到缓冲区</td><td align="center">CharBuffer</td></tr><tr><td align="center">IntBuffer</td><td align="center">存储整数数据据到缓冲区</td><td align="center">IntBuffer</td></tr><tr><td align="center">LongBuffer</td><td align="center">存储长整型数据到缓冲区</td><td align="center">LongBuffer</td></tr><tr><td align="center">DoubleBuffer</td><td align="center">存储浮点型数据到缓冲区</td><td align="center">DoubleBuffer</td></tr><tr><td align="center">FloatBuffer</td><td align="center">存储浮点型数据到缓冲区</td><td align="center">FloatBuffer</td></tr></tbody></table><h4 id="4-Channel使用机制"><a href="#4-Channel使用机制" class="headerlink" title="(4) Channel使用机制"></a>(4) Channel使用机制</h4><ul><li><strong>Channel基本介绍</strong></li></ul><p>NIO常用的 channel 有：FileChannel、DatagramChannel、SocketChannel、SocketServerChannel。NIO的channel 类似于流，但有如下区别：</p><ol><li><p>通道是双向的可以进行读写，而流是单向的只能读，或者写；</p></li><li><p>通道可以实现异步读写数据；</p></li><li><p>通道可以从缓冲区读取数据，也可以写入数据到缓冲区。</p></li></ol><ul><li><strong>FileChannel类</strong></li></ul><p>FileChannel 主要用来对本地文件进行 IO 操作，常见的方法有：</p><ol><li><p><code>public int read(ByteBuffer dst)</code>：从通道中读取数据到缓冲区中。</p></li><li><p><code>public int write(ByteBuffer src)</code>：把缓冲区中的数据写入到通道中。</p></li><li><p><code>public long transferFrom(ReadableByteChannel src,long position,long count)</code>：从目标通道中复制数据到当前通道。</p></li><li><p><code>public long transferTo(long position,long count,WriteableByteChannel target)</code>：把数据从当前通道复制给目标通道。</p></li></ol><p>使用FileChannel类写入文本文件：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D://word.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"Hello, Netty!"</span><span class="token punctuation">;</span>    <span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileChannel</span> channel <span class="token operator">=</span> fileOutputStream<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    byteBuffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    byteBuffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    channel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用FileChannel读取文本文件：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>           fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D://word.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">FileChannel</span> channel <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>           byteBuffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>           <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>fileInputStream <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用transferForm复制文件：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"world.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileChannel</span> inChannel <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileChannel</span> outChannel <span class="token operator">=</span> fileOutputStream<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//从哪拷贝,从几开始到几结束 对应的还有transferTo()方法.</span>    outChannel<span class="token punctuation">.</span><span class="token function">transferFrom</span><span class="token punctuation">(</span>inChannel<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inChannel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    outChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    inChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>Channel和Buffer的注意事项</strong></li></ul><ol><li><p>ByteBuffer 支持<strong>类型化</strong>的 put 和 get，<strong>put 放入什么数据类型，get 就应该使用相应的数据类型来取出</strong>，否则可能会产生 ByteUnderflowException 异常；</p></li><li><p>可以将一个普通的 Buffer 转换为只读的 Buffer：<code>asReadOnlyBuffer()</code> 方法；</p></li><li><p>NIO 提供了 MapperByteBuffer，可以让文件直接在<strong>内存（堆外内存）</strong>中进行修改，而如何同步到文件由 NIO 来完成；</p></li><li><p>NIO 还支持通过多个 Buffer (即 Buffer 数组) 完成读写操作，即<strong>Scattering (分散) 和 Gathering (聚集)</strong> ：</p><ul><li><p>Scattering (分散)：在向缓冲区写入数据时，可以使用 Buffer 数组依次写入，一个 Buffer 数组写满后，继续写入下一个 Buffer 数组。</p></li><li><p>Gathering (聚集)：从缓冲区读取数据时，可以依次读取，读完一个 Buffer 再按顺序读取下一个。</p></li></ul></li></ol><h4 id="5-Selector使用机制"><a href="#5-Selector使用机制" class="headerlink" title="(5) Selector使用机制"></a>(5) Selector使用机制</h4><ul><li><strong>Selector基本介绍</strong></li></ul><ol><li><p>Java 的 NIO 使用了非阻塞的 I/O 方式。可以用一个线程处理若干个客户端连接，就会使用到 Selector (选择器)；</p></li><li><p>Selector 能够检测到多个注册通道上是否有事件发生 (多个 Channel 以事件的形式注册到同一个 selector)，如果有事件发生，便获取事件然后针对每个事件进行相应的处理；</p></li><li><p>只有在连接真正有读写事件发生时，才会进行读写，减少了系统开销，并且不必为每个连接都创建一个线程，不用维护多个线程；</p></li><li><p>避免了多线程之间上下文切换导致的开销。</p></li></ol><ul><li><strong>Selector特点</strong></li></ul><ol><li><p>Netty 的 I/O 线程 NioEventLoop 聚合了 Selector (选择器 / 多路复用器)，可以并发处理成百上千个客户端连接；</p></li><li><p>当线程从某客户端 Socket 通道进行读写时，若没有数据可用，该线程可以进行其他任务；</p></li><li><p>线程通常将非阻塞 I/O 的空闲时间用于其他通道上执行 I/O 操作，所以单独的线程可以管理多个输入输出通道；</p></li><li><p>由于读写操作都是非阻塞的，就可以充分提高 I/O 线程的运行效率，避免由于频繁 I/O 阻塞导致的线程挂起；</p></li><li><p>一个 I/O 线程可以并发处理 N 个客户端连接和读写操作，这从根本上解决了传统同步阻塞 I/O “一连接一线程”模型，架构性能、弹性伸缩能力和可靠性都得到极大地提升。</p></li></ol><ul><li><strong>Selector常用方法</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Selector</span> implement <span class="token class-name">Closeable</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Selector</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//得到一个选择器对象</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//监控所有注册的通道，当其中的IO操作可以进行时，将对应的selectionkey加入内部集合并返回，参数设置超时时间</span>    <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectionKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从内部集合中得到所有的SelectionKey</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>SelectorKey相关方法</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SelectionKey</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Selector</span> <span class="token function">selector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//得到与之关联的Selector对象</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">SelectableChannel</span> <span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//得到与之关联的通道</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//得到与之关联的共享数据</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">SelectionKey</span> <span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token keyword">int</span> ops<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置或改变监听的事件类型</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通道是否可读</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通道是否可写</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//是否可以建立连接 ACCEPT</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-NIO网络编程过程分析"><a href="#6-NIO网络编程过程分析" class="headerlink" title="(6) NIO网络编程过程分析"></a>(6) NIO网络编程过程分析</h4><ol><li>当客户端连接时，会通过 SeverSocketChannel 得到对应的 SocketChannel；</li><li>Selector 进行监听，调用 <code>select()</code>方法，返回注册该 Selector 的所有通道中有事件发生的通道个数；</li><li>将 socketChannel 注册到 Selector 上，<code>public final SelectionKey register(Selector sel, int ops)</code>，一个 selector 上可以注册多个 SocketChannel。</li><li>注册后返回一个 SelectionKey，会和该 Selector 关联 (以<strong>集合</strong>的形式)。</li><li>有事件发生时再通过 SelectionKey 反向获取 SocketChannel，使用 <code>channnel()</code> 方法可以通过得到的 channel，完成业务处理。</li></ol><p>SelectionKey 中定义了四个操作标志位：<code>OP_READ</code> 表示通道中发生读事件；<code>OP_WRITE</code> —表示通道中发生写事件；<code>OP_CONNECT</code> —表示建立连接；<code>OP_ACCEPT</code> —请求新连接。</p><p>服务器端代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NIOServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ServerSocketChannel</span> serverSocketChannel<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 1. 创建ServerSocketChannel</span>            serverSocketChannel <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 2. 得到一个Selector对象</span>            <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 3. 绑定一个端口6666，在服务器监听</span>            serverSocketChannel<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 4. 设为非阻塞</span>            serverSocketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 5.把 serverSocketChannel 注册到selector，关心事件为OP_ACCEPT</span>            serverSocketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器等待一秒，无连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// 如果返回的&gt;0，就获取到相同的selectionKey集合</span>                <span class="token comment">// 1. 如果返回的&gt;0, 表示已经获取到关注的事件</span>                <span class="token comment">// 2. selector.selectedKeys()返回关注事件的集合</span>                <span class="token comment">//    通过selectorKeys反向获取通道</span>                <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> selectionKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> selectionKeys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">SelectionKey</span> selectionKey <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>selectionKey<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token class-name">SocketChannel</span> socketChannel <span class="token operator">=</span> serverSocketChannel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        socketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">,</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端连接成功 生成了一个socketChannel "</span> <span class="token operator">+</span> socketChannel                                <span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>selectionKey<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token class-name">SocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> selectionKey<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span>selectionKey<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"from 客户端"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NIOClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token class-name">SocketChannel</span> socketChannel <span class="token operator">=</span> <span class="token class-name">SocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InetSocketAddress</span> inetSocketAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>socketChannel<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>inetSocketAddress<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>socketChannel<span class="token punctuation">.</span><span class="token function">finishConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在连接中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"Hello, I'm client!"</span><span class="token punctuation">;</span>        <span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socketChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        socketChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端退出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三-I-O模型演化"><a href="#三-I-O模型演化" class="headerlink" title="三 I/O模型演化"></a>三 I/O模型演化</h2><h3 id="1-传统-I-O-模型"><a href="#1-传统-I-O-模型" class="headerlink" title="1. 传统 I/O 模型"></a>1. 传统 I/O 模型</h3><p>对于传统的 I/O 通信方式来说，客户端连接到服务端，服务端接收客户端请求并响应的流程为：<strong>读取 -&gt; 解码 -&gt; 应用处理 -&gt; 编码 -&gt; 发送结果</strong>。服务端为每一个客户端连接新建一个线程，建立通道，从而处理后续的请求，也就是 BIO 的方式。</p><img src="/2021/09/22/io-model/bio1.png" alt="图5. 传统I/O模型" style="zoom: 100%;"><p>这种方式在客户端数量不断增加的情况下，对于连接和请求的响应会急剧下降，并且占用太多线程浪费资源，线程数量也不是没有上限的，会遇到各种瓶颈。虽然可以使用线程池进行优化，但是依然有诸多问题，比如在线程池中所有线程都在处理请求时，无法响应其他的客户端连接，每个客户端依旧需要专门的服务端线程来服务，即使此时客户端无请求，也处于阻塞状态无法释放。基于此，提出了基于事件驱动的 Reactor 模型。</p><h3 id="2-Reactor-模型"><a href="#2-Reactor-模型" class="headerlink" title="2. Reactor 模型"></a>2. Reactor 模型</h3><p>Reactor 模式是基于<strong>事件驱动开发</strong>的，服务端程序处理传入多路请求，并将它们同步分派给请求对应的处理线程，Reactor 模式也叫 Dispatcher 模式，即 I/O 多路复用统一监听事件，收到事件后分发（Dispatch给某进程），这是编写高性能网络服务器的必备技术之一。</p><p>Reactor模式以 NIO 为底层支持，核心组成部分包括Reactor和Handler：</p><ul><li><p>Reactor：Reactor在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理程序来对 I/O 事件做出反应。它就像公司的电话接线员，它接听来自客户的电话并将线路转移到适当的联系人。</p></li><li><p>Handlers：处理程序执行 I/O 事件要完成的实际事件，Reactor 通过调度适当的处理程序来响应 I/O 事件，处理程序执行非阻塞操作。类似于客户想要与之交谈的公司中的实际员工。</p></li></ul><p>根据 Reactor 的数量和 Handler 线程数量，可以将 Reactor 分为三种模型：</p><ul><li>单线程模型 (单Reactor单线程)</li><li>多线程模型 (单Reactor多线程)</li><li>主从多线程模型 (多Reactor多线程) </li></ul><p><strong>单线程模型</strong></p><img src="/2021/09/22/io-model/reactor.png" alt="图6. 单线程模型" style="zoom: 100%;"><p>Reactor 内部通过 Selector 监控连接事件，收到事件后通过 dispatch 进行分发，如果是连接建立的事件，则由 Acceptor 处理，Acceptor 通过 accept 接受连接，并创建一个 Handler 来处理连接后续的各种事件，如果是读写事件，直接调用连接对应的 Handler 来处理。</p><p>Handler完成 read =&gt; (decode =&gt; compute =&gt; encode) =&gt;send 的业务流程。</p><p>这种模型好处是简单，坏处却很明显，当某个 Handler 阻塞时，会导致其他客户端的 handler 和 accpetor 都得不到执行，无法做到高性能，只适用于业务处理非常快速的场景，如 redis 读写操作。</p><p><strong>多线程模型</strong></p><img src="/2021/09/22/io-model/multi-reactor.png" alt="图7. 多线程模型" style="zoom: 100%;"><p>主线程中，Reactor 对象通过 Selector 监控连接事件,收到事件后通过 dispatch 进行分发，如果是连接建立事件，则由 Acceptor 处理，Acceptor 通过 accept 接收连接，并创建一个 Handler 来处理后续事件，而 Handler 只负责响应事件，不进行业务操作，也就是只进行 read 读取数据和 write 写出数据，业务处理交给一个线程池进行处理。</p><p>线程池分配一个线程完成真正的业务处理，然后将响应结果交给主进程的 Handler 处理，Handler将结果 send 给 client。</p><p>单 Reactor 承担所有事件的监听和响应，而当我们的服务端遇到大量的客户端同时进行连接，或者在请求连接时执行一些耗时操作，比如身份认证，权限检查等，这种<strong>瞬时的高并发就容易成为性能瓶颈</strong>。</p><p><strong>主从多线程模型</strong></p><img src="/2021/09/22/io-model/multi-reactor1.png" alt="图8. 主从多线程模型" style="zoom: 100%;"><p>在单 Reactor 多线程模型中，只有一个 selector，selector 负责 accept、read、write 事件的维护，而主从 Reactor 多线程模型中将使用两个 selector，主线程中的mainReactor 通过自己的 Selector 监控连接建立事件，收到事件后通过 Accpetor 接收，将新的连接分配给某个子线程。子线程中的 subReactor 将 mainReactor 分配的连接加入连接队列中通过自己的 Selector 进行监听，并创建一个 Handler 用于处理后续事件。</p><p>Handler 完成 read =&gt; 业务处理 =&gt; send 的完整业务流程。 </p><h2 id="四-Netty线程模型"><a href="#四-Netty线程模型" class="headerlink" title="四    Netty线程模型"></a>四    Netty线程模型</h2><p>Netty 线程模型就是 Reactor 模式的一个实现，如下图所示：</p><img src="/2021/09/22/io-model/netty.png" alt="图9. Netty Server架构图" style="zoom: 100%;"><h3 id="1-线程组"><a href="#1-线程组" class="headerlink" title="1. 线程组"></a>1. 线程组</h3><p>Netty 抽象了两组线程池 <code>BossGroup</code>  和 <code>WorkerGroup</code> ，其类型都是 NioEventLoopGroup，BossGroup 用来接受客户端发来的连接，WorkerGroup 则负责对完成TCP 三次握手的连接进行处理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1. 创建两个线程组bossGroup和workerGroup</span><span class="token comment">//2. bossGroup只是处理连接请求，真正的和客户端业务处理会交给workerGroup</span><span class="token comment">//3. 两个都是无限循环</span><span class="token class-name">EventLoopGroup</span> bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">EventLoopGroup</span> workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NioEventLoopGroup 里面包含了多个 NioEventLoop，管理 NioEventLoop 的生命周期。每个 NioEventLoop 中包含了一个 NIO Selector、一个队列、一个线程；其中线程用来做轮询注册到 Selector 上的 Channel 的读写事件和对投递到队列里面的事件进行处理。</p><p><strong>Boss NioEventLoop 线程的执行步骤</strong>：</p><ol><li><p>处理 accept 事件, 与 client 建立连接, 生成 NioSocketChannel。</p></li><li><p>将 NioSocketChannel 注册到某个 worker NIOEventLoop 上的 selector。</p></li><li><p>处理任务队列的任务， 即 runAllTasks。</p></li></ol><p><strong>Worker NioEventLoop 线程的执行步骤</strong>：</p><ol><li><p>轮询注册到自己 Selector 上的所有 NioSocketChannel 的 read 和 write 事件。</p></li><li><p>处理 read 和 write 事件，在对应 NioSocketChannel 处理业务。</p></li><li><p>runAllTasks 处理任务队列 TaskQueue 的任务，一些耗时的业务处理可以放入 TaskQueue 中慢慢处理，这样不影响数据在 pipeline 中的流动处理。</p></li></ol><p>Worker NIOEventLoop 处理 NioSocketChannel 业务时，使用了 <strong>pipeline</strong> (管道)，管道中维护了 handler 处理器链表，用来处理 channel 中的数据。</p><h3 id="2-ChannelPipeline"><a href="#2-ChannelPipeline" class="headerlink" title="2. ChannelPipeline"></a>2. ChannelPipeline</h3><p>Netty 将 Channel 的数据管道抽象为 ChannelPipeline，消息在 ChannelPipeline 中流动和传递。ChannelPipeline 持有 I/O 事件拦截器 ChannelHandler 的双向链表，由 ChannelHandler 对 I/O 事件进行拦截和处理，可以方便的新增和删除 ChannelHandler 来实现不同的业务逻辑定制，不需要对已有的 ChannelHandler 进行修改，能够实现对修改封闭和对扩展的支持。</p><p>ChannelPipeline 是一系列的 ChannelHandler 实例，流经一个 Channel 的入站和出站事件可以被 ChannelPipeline 拦截。每当一个新的 Channel 被创建了，都会建立一个新的 ChannelPipeline 并绑定到该 Channel 上，这个关联是永久性的；Channel 既不能附上另一个 ChannelPipeline 也不能分离当前这个。这些都由Netty 负责完成，而无需开发人员的特别处理。</p><p>下图为 ChannelPipeline 的一个实例对象，其为一个双向链表，在链表中存放的是 DefaultChannelHandlerContext。</p><img src="/2021/09/22/io-model/image-20210923131731689.png" alt="图10. ChannelPipeline实例" style="zoom:80%;"><p>根据起源，一个事件将由 ChannelInboundHandler 或 ChannelOutboundHandler 处理，ChannelHandlerContext 实现转发或传播到下一个 ChannelHandler。一个ChannelHandler 处理程序可以通知 ChannelPipeline 中的下一个 ChannelHandler 执行。Read 事件（入站事件）和 write 事件（出站事件）使用相同的pipeline，入站事件会从链表 head 往后传递到最后一个入站的 handler，出站事件会从链表 tail 往前传递到最前一个出站的 handler，两种类型的 handler 互不干扰。</p><img src="/2021/09/22/io-model/channelpipeline.png" alt="图11. ChannelPipeline实例" style="zoom:90%;"><h3 id="3-异步非阻塞"><a href="#3-异步非阻塞" class="headerlink" title="3. 异步非阻塞"></a>3. 异步非阻塞</h3><p><strong>写操作</strong>：通过 NioSocketChannel 的 write 方法向连接里面写入数据时候是非阻塞的，马上会返回，即使调用写入的线程是我们的业务线程。Netty 通过在 ChannelPipeline 中判断调用 NioSocketChannel 的 write 的调用线程是不是其对应的 NioEventLoop 中的线程，如果发现不是则会把写入请求封装为 WriteTask 投递到其对应的 NioEventLoop 中的队列里面，然后等其对应的 NioEventLoop 中的线程轮询读写事件时候，将其从队列里面取出来执行。</p><p><strong>读操作</strong>：当从 NioSocketChannel 中读取数据时候，并不是需要业务线程阻塞等待，而是等 NioEventLoop 中的 IO 轮询线程发现 Selector 上有数据就绪时，通过事件通知方式来通知业务数据已就绪，可以来读取并处理了。</p><p>每个 NioSocketChannel 对应的读写事件都是在其对应的 NioEventLoop 管理的单线程内执行，对同一个 NioSocketChannel 不存在并发读写，所以无需加锁处理。</p><p>使用 Netty 框架进行网络通信时，当我们发起 I/O 请求后会马上返回，而不会阻塞我们的业务调用线程；如果想要获取请求的响应结果，也不需要业务调用线程使用阻塞的方式来等待，而是当响应结果出来的时候，使用 I/O 线程异步通知业务的方式，所以在 <strong>整个请求 -&gt; 响应过程</strong> 中业务线程不会由于阻塞等待而不能干其他事情。</p>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IO </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World！</title>
      <link href="/2021/09/21/hello-world/"/>
      <url>/2021/09/21/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-常用命令"><a href="#Hexo-常用命令" class="headerlink" title="Hexo 常用命令"></a>Hexo 常用命令</h1><p>芜湖，终于在下午搭建好了个人博客，以下是<strong>hexo</strong>的一些常用命令。</p><h2 id="1-hexo-init"><a href="#1-hexo-init" class="headerlink" title="1. hexo init"></a>1. <strong>hexo init</strong></h2><p><code>hexo init</code>命令用于初始化本地文件夹为网站的根目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo init <span class="token punctuation">[</span>folder<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>folder </code>为可选参数，用于指定初始化目录的路径，若无指定则默认为当前目录</li></ul><h2 id="2-hexo-new"><a href="#2-hexo-new" class="headerlink" title="2. hexo new"></a>2. <strong>hexo new</strong></h2><p><code>hexo new</code>命令用于新建文章，一般可以简写为<code>hexo n</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>layout</code> 可选参数，用以指定文章类型，若无指定则默认由配置文件中的 default_layout 选项决定</li><li><code>title</code> 必填参数，用以指定文章标题，如果参数值中含有空格，则需要使用双引号包围</li></ul><h2 id="3-hexo-generate"><a href="#3-hexo-generate" class="headerlink" title="3. hexo generate"></a>3. hexo generate</h2><p><code>hexo generate</code> 命令用于生成静态文件，一般可以简写为 <code>hexo g</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-d</code> 选项，指定生成后部署，与 <code>hexo d -g</code> 等价</li></ul><p>详细信息请参考：<a href="https://hexo.io/docs/generating">https://hexo.io/docs/generating</a></p><h2 id="4-hexo-server"><a href="#4-hexo-server" class="headerlink" title="4. hexo server"></a>4. hexo server</h2><p><code>hexo server</code> 命令用于启动本地服务器，一般可以简写为 <code>hexo s</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-p</code> 选项，指定服务器端口，默认为 4000</li><li><code>-i</code> 选项，指定服务器 IP 地址，默认为 0.0.0.0</li><li><code>-s</code> 选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视</li></ul><p><strong>说明</strong> ：运行服务器前需要安装 hexo-server 插件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-server --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>详细信息请参考：<a href="https://hexo.io/docs/server.html">https://hexo.io/docs/server.html</a></p><h2 id="5-hexo-deploy"><a href="#5-hexo-deploy" class="headerlink" title="5. hexo deploy"></a>5. hexo deploy</h2><p><code>hexo deploy</code> 命令用于部署网站，即上传生成后的文件至<strong>github</strong>。一般可以简写为 <code>hexo d</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-g</code> 选项，指定生成后部署，与 <code>hexo g -d</code> 等价</li></ul><p><strong>说明</strong> ：部署前需要修改 _config.yml 配置文件，下面以 git 为例进行说明</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span><span class="token key atrule">type</span><span class="token punctuation">:</span> git<span class="token key atrule">repo</span><span class="token punctuation">:</span> &lt;repository url<span class="token punctuation">&gt;</span><span class="token key atrule">branch</span><span class="token punctuation">:</span>master<span class="token key atrule">message</span><span class="token punctuation">:</span> <span class="token key atrule">自定义提交消息，默认为Site updated</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> now('YYYY<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>DD HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss') <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细信息请参考：<a href="https://hexo.io/docs/deployment.html">https://hexo.io/docs/deployment.html</a></p><h2 id="6-hexo-clean"><a href="#6-hexo-clean" class="headerlink" title="6. hexo clean"></a>6. hexo clean</h2><p>   <code>hexo clean</code> 命令用于清理缓存文件，是一个比较常用的命令</p>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   <strong>网站显示异常时可尝试此操作</strong></p><h2 id="7-Option"><a href="#7-Option" class="headerlink" title="7. Option"></a>7. <strong>Option</strong></h2><h3 id="（1）hexo-–safe"><a href="#（1）hexo-–safe" class="headerlink" title="（1）hexo –safe"></a>（1）hexo –safe</h3><p><code>hexo --safe</code> 表示安全模式，用于禁用加载插件和脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo --safe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>安装新插件时遇到问题可尝试此操作</strong></p><h3 id="（2）hexo-–debug"><a href="#（2）hexo-–debug" class="headerlink" title="（2）hexo –debug"></a>（2）hexo –debug</h3><p><code>hexo --debug</code> 表示调试模式，用于将消息详细记录到终端和 <code>debug.log</code> 文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo --debug<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（3）hexo-–silent"><a href="#（3）hexo-–silent" class="headerlink" title="（3）hexo –silent"></a>（3）hexo –silent</h3><p><code>hexo --silent</code> 表示静默模式，用于静默输出到终端</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo --silent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>【参考资料】</p><ul><li><a href="https://hexo.io/docs/commands">https://hexo.io/docs/commands</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
